{"version":3,"sources":["Tabela.js","Formulario.js","App.js","index.js"],"names":["CabecalhoTabela","CorpoTabela","props","rows","dadosDosCarros","map","row","modelo","src","foto","alt","height","width","cilindrada","potencia","combustivel","preco","ano","className","onClick","carroAremover","idCarros","Tabela","this","inDadosCarros","carros","React","Component","Formulario","handlerCarroChange","evento","test","target","value","setCustomValidity","setState","handlerCilindradaChange","handlerPotenciaChange","handlerCombustivelChange","handlerPrecoChange","handlerAnoChange","handlerFotoChange","files","handlerSubmitForm","preventDefault","dadosFormulario","Modelo","state","UpFotografia","Cilindrada","Potencia","Combustivel","Preco","Ano","outDadosFotos","onSubmit","encType","type","onChange","required","accept","getCarros","a","fetch","resposta","ok","console","error","status","json","adicionaCarros","dadosNovoCarro","formData","FormData","append","Descricao","method","body","Error","removeCarro","dadoscarroremover","App","handlerremovecarro","Loadcarros","errorMessage","toString","window","location","reload","handlerDadosForm","dadosdoFormulario","loadState","carrosVindosDaAPI","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd42d29f.chunk.js","sourcesContent":["// Tabela.js\n// ****************************************************** \n\nimport React from 'react'\n\n// função que devolve o Cabeçalho da tabela\nfunction CabecalhoTabela() {\n    return (\n        <thead>\n            <tr>\n                {/* <th>Id do Carro</th> */}\n                <th>Nome do Carro</th>\n                <th>Foto do Carro</th>\n                <th>Cilindrada</th>\n                <th>Potencia</th>\n                <th>Combustivel</th>\n                <th>Preco</th>\n                <th>Ano</th>\n                <th></th>\n            </tr>\n        </thead>\n    )\n}\n\n// definição da função que devolve o Corpo da tabela\n// faz exatamente o mesmo da linha 7\nconst CorpoTabela = (props) => {\n    // esta função 'interna' irá ler e processar todos\n    // os objetos definidos dentro do array 'dadosDosCarros'\n    const rows = props.dadosDosCarros.map((row) => {\n        return (\n            <tr key={row.idCarros}>\n                {/* <td>{row.idCarros}</td> */}\n                <td><br></br><br></br>{row.modelo}</td>\n                <td><img src={'fotos/' + row.foto}\n                    alt={'foto do ' + row.modelo}\n                    height=\"150\" width=\"250\"/>\n                </td>\n                <td><br></br><br></br>{row.cilindrada}</td>\n                <td><br></br><br></br>{row.potencia}</td>\n                <td><br></br><br></br>{row.combustivel}</td>\n                <td><br></br><br></br>{row.preco}</td>\n                <td><br></br><br></br>{row.ano}</td>\n                <td>\n                </td>\n                <td>\n                <br></br><br></br>\n                <button className=\"btn btn-secondary\" onClick={()=>props.carroAremover(row)}>Delete</button>\n                </td>\n            </tr>\n\n        )\n    })\n\n    // valor devolvido pela função 'CorpoTabela'\n    return (<tbody>{rows}</tbody>)\n}\n\n// componente que junta os dois sub-componentes, \n// formando um novo 'componente'\nclass Tabela extends React.Component {\n    render() {\n\n        // estamos a ler os dados que são recebidos pelo componente\n        // <=> this.props.dadosAlunos\n        const { inDadosCarros, carros } = this.props\n\n        return (\n            <table className=\"table table-striped\">\n                <CabecalhoTabela />\n                {/* o parâmetro 'dadoscarros' irá receber\n                    os dados que vêm da componente 'mãe' */}\n                <CorpoTabela dadosDosCarros={inDadosCarros} carroAremover={carros} />\n            </table>\n        );\n    }\n}\n\n\nexport default Tabela\n\n","//Formulario.js\n//este ficheiro irá conter o código para representar o formulário no ecrã\n//********************************* */\n\nimport React from 'react'\n\n\n/**\n * Formulário para adicionar (fazer upload) de um Carro\n */\n class Formulario extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        //variáveis para guardar os dados introduzidos pelo utilizador, no formulário\n        this.state = {\n            modelo:\"\",\n            foto:null,\n            //idCarros:\"\",\n            cilindrada:\"\",\n            potencia:\"\",\n            combustivel:\"\",\n            //link:\"\",\n            preco:\"\",\n            ano:\"\"\n        } \n    }\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Carro\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerCarroChange = (evento) =>{\n        //validar os valores introduzidos na TextBox (Impede que o utilizador insira números)\n        if(/\\d/.test(evento.target.value)){\n            evento.target.setCustomValidity(\"Nome do Carro Inválido\");\n            return;\n        }else {\n            evento.target.setCustomValidity(\"\");\n        }\n\n        //guardar os dados recolhidos\n        this.setState({\n            modelo: evento.target.value\n        });\n    }\n\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Carro\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerCilindradaChange = (evento) =>{\n    \n        //guardar os dados recolhidos\n        this.setState({\n            cilindrada: evento.target.value\n        });\n    }\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Carro\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerPotenciaChange = (evento) =>{\n\n        //guardar os dados recolhidos\n        this.setState({\n            potencia: evento.target.value\n        });\n    }\n\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Carro\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerCombustivelChange = (evento) =>{\n        //validar os valores introduzidos na TextBox (Impede que o utilizador insira números)\n        if(/\\d/.test(evento.target.value)){\n            evento.target.setCustomValidity(\"Combustivel do Carro Inválido\");\n            return;\n        }else {\n            evento.target.setCustomValidity(\"\");\n        }\n\n        //guardar os dados recolhidos\n        this.setState({\n            combustivel: evento.target.value\n        });\n    }\n\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Carro\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerPrecoChange = (evento) =>{\n       //validar os valores introduzidos na TextBox (Impede que o utilizador insira números)\n        if(/\\d/.test(evento.target.value)){\n         evento.target.setCustomValidity(\"Preço do Carro Inválido\");\n            return;\n        }else \n        {\n        evento.target.setCustomValidity(\"\");\n    }\n        //guardar os dados recolhidos\n        this.setState({\n            preco: evento.target.value\n        });\n    }\n\n    /**\n     * processar os dados fornecidos pelo utilizador sobre o nome do Carro\n     * @param {*} evento - dados adicionados pelo utilizador \n     * \n     */\n     handlerAnoChange = (evento) =>{\n    \n        //guardar os dados recolhidos\n        this.setState({\n            ano: evento.target.value\n        });\n    }\n    \n\n\n    /**\n     * processar os dados fornecidos pelo utilizador no upload da foto do Carro\n     * @param {} evento - dados adicionados pelo utilizador\n     */\n    handlerFotoChange = (evento) => {\n        //guardar os dados recolhidos \n        this.setState({\n            foto: evento.target.files[0]\n        });\n    }\n\n    /**\n     * handler para processar os dados fornecidos pelo Formulário\n     * @param {*} evento \n     */\n    handlerSubmitForm = (evento) =>{\n        //impedir o formulário de autoenviar os dados para o servidor\n        //essa tarefa cabe ao componente App.js\n        evento.preventDefault();\n        \n        //prepração dos dados para serem enviados para a App.js\n        //podemos já enviar os dados prontos para serem adicionados à API\n        let dadosFormulario = {\n            Modelo: this.state.modelo,\n            UpFotografia: this.state.foto,\n            Cilindrada: this.state.cilindrada,\n            Potencia: this.state.potencia,\n            Combustivel: this.state.combustivel,\n            Preco:this.state.preco,\n            Ano:this.state.ano\n            //CarroFK: this.state.idCarros\n        };\n\n        //concretizar a exportação dos dados para a App.js\n        this.props.outDadosFotos(dadosFormulario);\n    }\n\n    render(){\n        // ler os dados que foram/são fornecidos à Tabela5,\n        // como parâmetro de entrada/saída\n        //const { inDadosCarros } = this.props;\n\n        return(\n            //o 'return' só consegue devolver um objeto\n            <form onSubmit={this.handlerSubmitForm} encType=\"multipart/form-data\">\n                <div className=\"row\">\n                <div className=\"col-md-4\">\n                        {/* Carro: <EscolheCarro inListaCarros={inDadosCarros}\n                        outIdCarroEscolhido={this.handlerCarroChange}/><br /> */}\n                        Modelo: <input type=\"text\"\n                                value={this.state.modelo}\n                                onChange={this.handlerCarroChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />\n                </div>\n                <div className=\"col-md-4\">  \n                        Foto do Carro: <input type=\"file\" \n                                        required\n                                        accept=\".jpg,.png,.JPG,.PNG\"\n                                        onChange={this.handlerFotoChange}\n                                        className=\"form-control\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Cilindrada: <input type=\"text\"\n                                value={this.state.cilindrada}\n                                onChange={this.handlerCilindradaChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Potencia: <input type=\"text\"\n                                value={this.state.potencia}\n                                onChange={this.handlerPotenciaChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Combustivel: <input type=\"text\"\n                                value={this.state.combustivel}\n                                onChange={this.handlerCombustivelChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Preco: <input type=\"text\"\n                                value={this.state.preco}\n                                onChange={this.handlerPrecoChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <div className=\"col-md-4\">  \n                        Ano: <input type=\"text\"\n                                value={this.state.ano}\n                                onChange={this.handlerAnoChange}\n                                className=\"form-control btn btn-outline-secondary\" /><br />  \n                </div>\n                <br />\n                <br />\n                <br />\n                <br />\n                </div>\n                    <input type=\"submit\" value=\"Adicionar Carro\" className=\"btn btn-secondary\" /><br /><br /> \n            </form>\n            \n        )\n    }\n}\n\nexport default Formulario;","// *****************************************\n// App.js\n// *****************************************\n\nimport React from 'react';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// importar componentes\nimport Tabela from './Tabela';\nimport Formulario from './Formulario';\n\n/**\n * Função que irá ler os dados (carros) da API\n */\nasync function getCarros() {\n\n  // ler os dados da API\n  // https://create-react-app.dev/docs/proxying-api-requests-in-development/\n  let resposta = await fetch(\"api/CarrosAPI/\");\n\n  if (!resposta.ok) {\n    // não foi recebido o código 200 do HTTP\n    console.error(\"Não conseguimos ler os dados da API. Código: \" + resposta.status);\n  }\n  return await resposta.json();\n}\n\n/**\n * invoca a API e envia os dados do novo Carro\n * @param {} dadosNovoCarro \n */\nasync function adicionaCarros(dadosNovoCarro) {\n  let formData = new FormData();\n  formData.append(\"Modelo\", dadosNovoCarro.Modelo);\n  formData.append(\"UpFotografia\", dadosNovoCarro.UpFotografia);\n  formData.append(\"Cilindrada\", dadosNovoCarro.Cilindrada);\n  formData.append(\"Potencia\", dadosNovoCarro.Potencia);\n  formData.append(\"Descricao\", dadosNovoCarro.Descricao);\n  formData.append(\"Combustivel\", dadosNovoCarro.Combustivel); \n  formData.append(\"Preco\", dadosNovoCarro.Preco);\n  formData.append(\"Ano\", dadosNovoCarro.Ano);\n  // formData.append(\"titulo\", \"ola\");\n  // formData.append(\"UpFotografia\", null);\n  // formData.append(\"pontuacao\", 6);\n  // formData.append(\"capa\", \"texto\")\n  // formData.append(\"realizador\", \"Peter\");\n  // formData.append(\"elenco\", \"ator\");\n  // formData.append(\"duracao\", 50);\n  // formData.append(\"link\", \"https://www.imdb.com/title/tt8629748/?ref_=nv_sr_srsg_0\");\n  // formData.append(\"descricao\", \"Ola\");\n\n\n  // formData.append(\"CarroFK\",dadosNovoCarro.CarroFK);\n  let resposta = await fetch(\"api/CarrosAPI\", {\n    method: \"POST\",\n    body: formData\n  });\n\n  //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n  if (!resposta.ok) {\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo Carro. Código= ' + resposta.status);\n  }\n\n  //Devolver os dados a seres usados na componente\n  return await resposta.json();\n}\n\nasync function removeCarro(dadoscarroremover) {\n  let formData = new FormData();\n  formData.append(\"idCarros\", dadoscarroremover.idCarros);\n\n  let resposta = await fetch(\"api/CarrosAPI/\" + dadoscarroremover.idCarros, {\n    method: \"DELETE\",\n    body: formData\n  });\n\n  //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n  if (!resposta.ok) {\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo carro. Código= ' + resposta.status);\n  }\n\n  //Devolver os dados a seres usados na componente\n  return await resposta.json();\n\n}\n\n\n\n/**\n * Componente principal do meu projeto\n */\nclass App extends React.Component {\n\n\n  /**\n   * Construtor da classe -> tem sempre este nome\n   */\n  constructor(props) {\n    super(props); // <--- esta É SEMPRE a primeira instrução\n\n    this.state = {\n      /**\n       * array que irá conter os dados dos carros, vindas da API\n       */\n      carros: [],\n      /**\n       * variável para conter o 'estado' da app, \n       * no carregamento dos dados das Fotografias, da API\n       * @type{\"carregando dados\" | \"sucesso\" | \"erro\"}\n       */\n      loadState: \"\",\n      /**\n       * guarda a mensagem de erro, se algo correr mal\n       */\n      errorMessage: null\n    }\n  }\n\n  /**\n   * Quando o objeto é criado, executa o código aqui escrito\n   * Vamos usá-lo para carregar os dados da API\n   */\n  componentDidMount() {\n    // ler os dados dos Carros e adicioná-los à state 'carros'\n    this.Loadcarros();\n  }\n\n  /**\n   * Carrega os dados dos carros da API e adiciona-os ao array 'carros'\n   */\n  async Loadcarros() {\n    /* Tarefas:\n     *   1. Ler os dados da API (fetch)\n         2. atualizar os dados na var. state\n     */\n    try {\n      // 1.\n      this.setState({ loadState: \"carregando dados\" });\n      let carrosVindosDaAPI = await getCarros();\n\n      // 2.\n      // esta não é a forma correta: this.state.fotos = fotosVindosDaAPI;\n      this.setState({\n        carros: carrosVindosDaAPI,\n        loadState: \"sucesso\"\n      });\n    } catch (erro) {\n      this.setState({\n        loadState: \"erro\",\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro na leitura dos carros da API\", erro);\n    }\n  }\n\n\n  /**\n * método que sabe identificar o 'anime' que deverá ser retirado da tabela\n * @param {*} idCarros - dados do anime a remover\n */\n  handlerremovecarro = async (idCarros) => {\n    /*\n     * Tarefas:\n     * 1 - preparar os dados para serem enviados para a API\n     * 2 - enviar os dados para a API\n     * 3 - efetuar o reload da tabela \n     */\n    /**\n    * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n    */\n    try {\n      //Ponto 2\n      await removeCarro(idCarros);\n\n      //Ponto 3\n      await this.Loadcarros();\n    } catch (erro) {\n      this.setState({\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro ao submeter os dados do novo carro; \", erro)\n    }\n    window.location.reload();\n  }\n\n\n  /**\n     * processar os dados recolhidos pelo Formulário\n     * @param {*} dadosDoFormulario \n     */\n\n  handlerDadosForm = async (dadosdoFormulario) => {\n    /* \n     * Tarefas:\n     * 1 - preparar os dados para serem enviados para a API\n     * 2 - enviar os dados para a API\n     * 3 - efetuar o reload da tabela \n     **/\n\n    /*\n     * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n     **/\n\n    try {\n      //Ponto 2\n      await adicionaCarros(dadosdoFormulario);\n\n      //Ponto 3\n      await this.Loadcarros();\n    } catch (erro) {\n      this.setState({\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro ao submeter os dados do novo Carro; \", erro)\n    }\n    window.location.reload();\n  }\n\n\n  render() {\n    //recuperar os dados do 'state' para usar dentro deste método\n    const { carros } = this.state;\n\n    //determinar o comportamento do 'componente', \n    //em função do seu estado\n    switch (this.state.loadState) {\n      case \"carregando dados\":\n        return <p>A carregar os dados. Aguarde, por favor.</p>\n      case \"erro\":\n        return <p>Ocorreu um erro: {this.state.errorMessage + '.' ?? \"Não sabemos qual\"}</p>\n      case \"sucesso\":\n        return (\n          <div className=\"container\">\n            <h1>Fotografias dos Carros</h1>\n            {/* adição do Formulário que há-de recolher os dados da nova fotografia */}\n            <Formulario inDadosCarros={carros} outDadosFotos={this.handlerDadosForm} />\n\n            <div className=\"row\">\n              <div className=\"col-md-20\">\n                <hr />\n                <h4>Tabela com os Carros</h4>\n                {/* Tabela5 tem um 'parâmetro de entrada', chamado 'inDadosFotos'.\n                Neste caso, está a receber o array JSON com os dados das fotos dos Carros,\n                lidos da API */}\n                <Tabela inDadosCarros={carros} carros={this.handlerremovecarro} />\n              </div>\n            </div>\n          </div>\n        );\n      default: return null;\n    }\n  }\n}\nexport default App;","// **********************************************\n// index.js\n// **********************************************\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}